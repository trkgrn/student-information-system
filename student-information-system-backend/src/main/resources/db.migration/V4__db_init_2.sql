CREATE TABLE IF NOT EXISTS public.student
(
    student_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id    BIGINT,
    student_no VARCHAR(9),
    CONSTRAINT pk_student PRIMARY KEY (student_id),
    CONSTRAINT uc_student_student_no UNIQUE (student_no),
    CONSTRAINT FK_STUDENT_ON_USER_ID FOREIGN KEY (user_id) REFERENCES public."user" (user_id)
);

CREATE TABLE IF NOT EXISTS public.teacher
(
    teacher_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id    BIGINT,
    CONSTRAINT pk_teacher PRIMARY KEY (teacher_id),
    CONSTRAINT FK_TEACHER_ON_USER_ID FOREIGN KEY (user_id) REFERENCES public."user" (user_id)
);

CREATE TABLE IF NOT EXISTS public.faculty
(
    faculty_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name       VARCHAR(255),
    CONSTRAINT pk_faculty PRIMARY KEY (faculty_id)
);

CREATE TABLE IF NOT EXISTS public.branch
(
    branch_id  BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name       VARCHAR(255),
    faculty_id BIGINT,
    CONSTRAINT pk_branch PRIMARY KEY (branch_id),
    CONSTRAINT FK_BRANCH_ON_FACULTY_ID FOREIGN KEY (faculty_id) REFERENCES public.faculty (faculty_id)
);

CREATE TABLE IF NOT EXISTS public.class
(
    class_id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    grade_year INTEGER,
    branch_id  BIGINT,
    CONSTRAINT pk_class PRIMARY KEY (class_id),
    CONSTRAINT FK_CLASS_ON_BRANCH_ID FOREIGN KEY (branch_id) REFERENCES public.branch (branch_id)
);

CREATE TABLE IF NOT EXISTS public.lesson
(
    lesson_id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name        VARCHAR(255),
    code        VARCHAR(255),
    description VARCHAR(255),
    CONSTRAINT pk_lesson PRIMARY KEY (lesson_id),
    CONSTRAINT uc_lesson_code UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.education_season
(
    education_season_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name                VARCHAR(255),
    CONSTRAINT "pk_educatıon_season" PRIMARY KEY (education_season_id)
);

CREATE TABLE IF NOT EXISTS public.letter_grade
(
    letter_grade_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    grade           VARCHAR(255)                            NOT NULL,
    min             INTEGER                                 NOT NULL,
    max             INTEGER                                 NOT NULL,
    coefficient     DOUBLE PRECISION                                 NOT NULL,
    is_pass         BOOLEAN,
    CONSTRAINT pk_letter_grade PRIMARY KEY (letter_grade_id)
);

CREATE TABLE IF NOT EXISTS public.live_lesson
(
    live_lesson_id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    is_first_period     BOOLEAN,
    midterm_percent     INTEGER,
    final_percent       INTEGER,
    is_active           BOOLEAN,
    education_season_id BIGINT,
    class_id            BIGINT,
    lesson_id           BIGINT,
    teacher_id          BIGINT,
    CONSTRAINT "pk_lıve_lesson" PRIMARY KEY (live_lesson_id),
    CONSTRAINT FK_LIVE_LESSON_ON_CLASS_ID FOREIGN KEY (class_id) REFERENCES public.class (class_id),
    CONSTRAINT FK_LIVE_LESSON_ON_EDUCATION_SEASON_ID FOREIGN KEY (education_season_id) REFERENCES public.education_season (education_season_id),
    CONSTRAINT FK_LIVE_LESSON_ON_LESSON_ID FOREIGN KEY (lesson_id) REFERENCES public.lesson (lesson_id),
    CONSTRAINT FK_LIVE_LESSON_ON_TEACHER_ID FOREIGN KEY (teacher_id) REFERENCES public.teacher (teacher_id)
);

CREATE TABLE IF NOT EXISTS public.note
(
    note_id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    state           VARCHAR(255)                            NOT NULL,
    midterm_exam    INTEGER,
    final_exam      INTEGER,
    average         INTEGER,
    letter_grade_id BIGINT,
    student_id      BIGINT,
    live_lesson_id  BIGINT,
    CONSTRAINT pk_note PRIMARY KEY (note_id),
    CONSTRAINT FK_NOTE_ON_LETTER_GRADE_ID FOREIGN KEY (letter_grade_id) REFERENCES public.letter_grade (letter_grade_id),
    CONSTRAINT FK_NOTE_ON_LIVE_LESSON_ID FOREIGN KEY (live_lesson_id) REFERENCES public.live_lesson (live_lesson_id),
    CONSTRAINT FK_NOTE_ON_STUDENT_ID FOREIGN KEY (student_id) REFERENCES public.student (student_id)
);
